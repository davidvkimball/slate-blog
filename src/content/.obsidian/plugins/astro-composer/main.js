/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var x=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var k=Object.prototype.hasOwnProperty;var $=(f,m)=>{for(var s in m)x(f,s,{get:m[s],enumerable:!0})},A=(f,m,s,e)=>{if(m&&typeof m=="object"||typeof m=="function")for(let t of T(m))!k.call(f,t)&&t!==s&&x(f,t,{get:()=>m[t],enumerable:!(e=E(m,t))||e.enumerable});return f};var M=f=>A(x({},"__esModule",{value:!0}),f);var I={};$(I,{default:()=>P});module.exports=M(I);var i=require("obsidian"),N={enableUnderscorePrefix:!1,defaultTemplate:`---
title: "{{title}}"
date: {{date}}
description: ""
tags: []
---
`,linkBasePath:"/blog/",postsFolder:"posts",automatePostCreation:!0,autoInsertProperties:!0,creationMode:"file",indexFileName:"index",dateFormat:"YYYY-MM-DD HH:mm",excludedDirectories:"",onlyAutomateInPostsFolder:!1},P=class extends i.Plugin{async onload(){await this.loadSettings();let s=document.createElement("link");s.rel="stylesheet",s.href=this.manifest.dir+"/styles.css",document.head.appendChild(s),this.app.workspace.onLayoutReady(()=>{this.registerCreateEvent()}),this.addCommand({id:"standardize-properties",name:"Standardize Properties",editorCallback:(e,t)=>{t.file instanceof i.TFile&&this.standardizeProperties(t.file)}}),this.addCommand({id:"convert-wikilinks-astro",name:"Convert internal links for Astro",editorCallback:(e,t)=>{t.file instanceof i.TFile&&this.convertWikilinksForAstro(e,t.file)}}),this.addSettingTab(new v(this.app,this))}registerCreateEvent(){if(this.createEvent&&this.app.vault.off("create",this.createEvent),this.settings.automatePostCreation){let s=0,e=500;this.createEvent=async t=>{let c=Date.now();if(!(c-s<e)&&(s=c,t instanceof i.TFile&&t.extension==="md")){let l=t.path,n=this.settings.postsFolder||"",p=await this.app.vault.adapter.stat(t.path),r=(p==null?void 0:p.mtime)&&c-p.mtime<1e3,u=(await this.app.vault.read(t)).trim()==="";if(!r||!u)return;if(this.settings.onlyAutomateInPostsFolder){if(!n||l.startsWith(n+"/")||l===n){let a=this.app.metadataCache.getCache(t.path);(!a||!a.sections||a.sections.length===0)&&new y(this.app,t,this).open()}}else if(!this.settings.excludedDirectories.split("|").map(h=>h.trim()).filter(h=>h.length>0).some(h=>l.startsWith(h+"/")||l===h)){let h=this.app.metadataCache.getCache(t.path);(!h||!h.sections||h.sections.length===0)&&new y(this.app,t,this).open()}}},this.registerEvent(this.app.vault.on("create",this.createEvent))}}toKebabCase(s){return s.toLowerCase().replace(/[^a-z0-9\s-]/g,"").trim().replace(/\s+/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"")}async createPostFile(s,e){if(!e)return new i.Notice("Title is required to create a post."),null;let t=this.toKebabCase(e),c=this.settings.enableUnderscorePrefix?"_":"",l=this.settings.postsFolder||"";if(l&&(this.app.vault.getAbstractFileByPath(l)instanceof i.TFolder||await this.app.vault.createFolder(l)),this.settings.creationMode==="folder"){let n=`${c}${t}`,p=l?`${l}/${n}`:n;try{this.app.vault.getAbstractFileByPath(p)instanceof i.TFolder||await this.app.vault.createFolder(p)}catch(a){}let r=`${this.settings.indexFileName}.md`,d=`${p}/${r}`;if(this.app.vault.getAbstractFileByPath(d)instanceof i.TFile)return new i.Notice(`File already exists at ${d}.`),null;try{await this.app.vault.rename(s,d);let a=this.app.vault.getAbstractFileByPath(d);return a instanceof i.TFile?(setTimeout(()=>{let h=this.app.workspace.getLeavesOfType("file-explorer")[0];if(h&&h.view){let o=h.view.tree;o&&a instanceof i.TFile&&o.revealFile(a)}},200),await this.app.workspace.getLeaf(!1).openFile(a),this.settings.autoInsertProperties&&await this.addPropertiesToFile(a,e),a):null}catch(a){return new i.Notice(`Failed to create folder structure: ${a.message}.`),null}}else{let n=`${c}${t}.md`,p=l?`${l}/${n}`:n,r=this.app.vault.getAbstractFileByPath(p);if(r instanceof i.TFile&&r!==s)return new i.Notice(`File with name "${n}" already exists.`),null;try{await this.app.vault.rename(s,p);let d=this.app.vault.getAbstractFileByPath(p);return d instanceof i.TFile?(await this.app.workspace.getLeaf(!1).openFile(d),this.settings.autoInsertProperties&&await this.addPropertiesToFile(d,e),d):null}catch(d){return new i.Notice(`Failed to rename file: ${d.message}.`),null}}}async addPropertiesToFile(s,e,t){let c=new Date,l=window.moment(c).format(this.settings.dateFormat),n=this.settings.defaultTemplate;n=n.replace(/\{\{title\}\}/g,e),n=n.replace(/\{\{date\}\}/g,l),await this.app.vault.modify(s,n)}async standardizeProperties(s){if(!(s instanceof i.TFile)){new i.Notice("No active file.");return}let e=await this.app.vault.read(s),t=s.basename.replace(/^_/,""),c=0,l={};if(e.startsWith("---")){let o=e.indexOf(`
---`,3);if(o!==-1){c=o+4;let C=e.slice(4,o);try{C.split(`
`).forEach(w=>{let F=w.match(/^(\w+):\s*(.+)$/);if(F){let[,b,D]=F;l[b]=D}})}catch(w){new i.Notice("Failed to parse existing properties.");return}}}let n=this.settings.defaultTemplate.split(`
`),p=[],r={},d=!1;for(let o=0;o<n.length;o++){let C=n[o];if(C==="---"){if(d=!d,!d)break;continue}if(d){let w=C.match(/^(\w+):\s*(.+)$/);if(w){let[,F,b]=w;p.push(F),r[F]=b}}}let u=window.moment(new Date).format(this.settings.dateFormat),a={};for(let o of p)o in l?a[o]=l[o]:o==="title"?a[o]=`"${t}"`:o==="date"?a[o]=u:a[o]=r[o];for(let o in l)p.includes(o)||(a[o]=l[o]);let g=`---
`;for(let o of p)g+=`${o}: ${a[o]}
`;for(let o in a)p.includes(o)||(g+=`${o}: ${a[o]}
`);g+="---",g=g.replace(/\{\{title\}\}/g,t),g=g.replace(/\{\{date\}\}/g,u);let h=e.slice(c).trimStart();g+=h?`
`+h:"",await this.app.vault.modify(s,g),new i.Notice("Properties standardized using template.")}async convertWikilinksForAstro(s,e){if(!(e instanceof i.TFile)){new i.Notice("No active file.");return}let c=s.getValue();c=c.replace(/\[\[([^\]|]+)(\|([^\]]+))?\]\]/g,(l,n,p,r)=>{let d=r||n,u=this.settings.linkBasePath;u.startsWith("/")||(u="/"+u),u.endsWith("/")||(u=u+"/");let a=this.settings.postsFolder?`${this.settings.postsFolder}/`:"",g=this.settings.indexFileName||"index";if(a&&n.startsWith(a)&&n.endsWith(`/${g}`)){let h=n.slice(a.length,-(g.length+1));return`[${d}](${u}${h}/)`}else{let h=this.toKebabCase(n);return`[${d}](${u}${h}/)`}}),c=c.replace(/\[(.*?)\]\(([^)]+\.md)\)/g,(l,n,p)=>{let r=this.settings.linkBasePath;r.startsWith("/")||(r="/"+r),r.endsWith("/")||(r=r+"/");let d=p.replace(/^\.\.?\//,"").replace(/\.md$/,"").replace(/^\/|\/$/,""),u=this.settings.indexFileName||"index";if(d.endsWith(`/${u}`)){let a=d.slice(0,-(u.length+1));return`[${n}](${r}${a}/)`}else{let a=this.toKebabCase(d);return`[${n}](${r}${a}/)`}}),c=c.replace(/\{\{([^}]+)\}\}/g,(l,n)=>{let p=this.toKebabCase(n.replace(".md","")),r=this.settings.linkBasePath;return r.startsWith("/")||(r="/"+r),r.endsWith("/")||(r=r+"/"),`[Embedded: ${n}](${r}${p}/)`}),s.setValue(c),new i.Notice("All internal links converted for Astro.")}async loadSettings(){this.settings=Object.assign({},N,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},y=class extends i.Modal{constructor(s,e,t){super(s);this.file=e,this.plugin=t}onOpen(){let{contentEl:s}=this;s.empty(),s.createEl("h2",{text:"New Blog Post"}),s.createEl("p",{text:"Enter a title for your blog post:"}),this.titleInput=s.createEl("input",{type:"text",placeholder:"My Awesome Blog Post",cls:"astro-composer-title-input"}),this.titleInput.focus();let e=s.createDiv({cls:"astro-composer-button-container"}),t=e.createEl("button",{text:"Cancel",cls:"astro-composer-cancel-button"});t.onclick=()=>this.close();let c=e.createEl("button",{text:"Create",cls:["astro-composer-create-button","mod-cta"]});c.onclick=()=>this.createPost(),this.titleInput.addEventListener("keypress",l=>{l.key==="Enter"&&this.createPost()})}async createPost(){let s=this.titleInput.value.trim();if(!s){new i.Notice("Please enter a title.");return}try{let e=await this.plugin.createPostFile(this.file,s);e&&this.plugin.settings.autoInsertProperties&&await this.plugin.addPropertiesToFile(e,s)}catch(e){new i.Notice(`Error creating post: ${e.message}.`)}this.close()}onClose(){let{contentEl:s}=this;s.empty()}},v=class extends i.PluginSettingTab{constructor(s,e){super(s,e);this.autoRenameContainer=null;this.postsFolderContainer=null;this.onlyAutomateContainer=null;this.creationModeContainer=null;this.indexFileContainer=null;this.excludedDirsContainer=null;this.underscorePrefixContainer=null;this.autoInsertContainer=null;this.plugin=e}display(){let{containerEl:s}=this;s.empty(),new i.Setting(s).setName("Automate post creation").setDesc("Automatically show title dialog for new .md files, rename them based on the title, and insert properties if enabled.").addToggle(e=>e.setValue(this.plugin.settings.automatePostCreation).onChange(async t=>{this.plugin.settings.automatePostCreation=t,this.plugin.settings.autoInsertProperties=t,await this.plugin.saveSettings(),this.plugin.registerCreateEvent(),this.updateConditionalFields()})),this.autoRenameContainer=s.createDiv({cls:"auto-rename-fields"}),this.autoRenameContainer.style.display=this.plugin.settings.automatePostCreation?"block":"none",this.autoInsertContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.autoInsertContainer).setName("Auto-insert properties").setDesc("Automatically insert the properties template when creating new files (requires 'Automate post creation' to be enabled).").addToggle(e=>e.setValue(this.plugin.settings.autoInsertProperties).setDisabled(!this.plugin.settings.automatePostCreation).onChange(async t=>{this.plugin.settings.autoInsertProperties=t,await this.plugin.saveSettings()})),this.postsFolderContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.postsFolderContainer).setName("Posts folder").setDesc("Folder name for blog posts (leave blank to use the vault folder). You can specify the default location for new notes in Obsidian's 'Files and links' settings.").addText(e=>e.setPlaceholder("Enter folder path").setValue(this.plugin.settings.postsFolder).onChange(async t=>{this.plugin.settings.postsFolder=t,await this.plugin.saveSettings()})),this.onlyAutomateContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.onlyAutomateContainer).setName("Only automate in this folder").setDesc("When enabled, automation will only trigger for new .md files within the specified Posts folder and subfolders.").addToggle(e=>e.setValue(this.plugin.settings.onlyAutomateInPostsFolder).onChange(async t=>{this.plugin.settings.onlyAutomateInPostsFolder=t,await this.plugin.saveSettings(),this.updateExcludedDirsField()})),this.excludedDirsContainer=this.autoRenameContainer.createDiv({cls:"excluded-dirs-field"}),this.excludedDirsContainer.style.display=this.plugin.settings.onlyAutomateInPostsFolder?"none":"block",new i.Setting(this.excludedDirsContainer).setName("Excluded directories").setDesc("Directories to exclude from automatic post creation (e.g., pages|posts/example). Excluded directories and their child folders will be ignored. Use '|' to separate multiple directories.").addText(e=>e.setPlaceholder("pages|posts/example").setValue(this.plugin.settings.excludedDirectories).onChange(async t=>{this.plugin.settings.excludedDirectories=t,await this.plugin.saveSettings()})),this.creationModeContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.creationModeContainer).setName("Creation mode").setDesc("How to create new posts: file-based or folder-based with index.md.").addDropdown(e=>e.addOption("file","File-based (post-title.md)").addOption("folder","Folder-based (post-title/index.md)").setValue(this.plugin.settings.creationMode).onChange(async t=>{this.plugin.settings.creationMode=t,await this.plugin.saveSettings(),this.updateIndexFileField()})),this.indexFileContainer=this.autoRenameContainer.createDiv({cls:"index-file-field"}),this.indexFileContainer.style.display=this.plugin.settings.creationMode==="folder"?"block":"none",new i.Setting(this.indexFileContainer).setName("Index file name").setDesc("Name for the main file in folder-based mode (without .md extension).").addText(e=>e.setPlaceholder("index").setValue(this.plugin.settings.indexFileName).onChange(async t=>{this.plugin.settings.indexFileName=t||"index",await this.plugin.saveSettings()})),this.underscorePrefixContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.underscorePrefixContainer).setName("Use underscore prefix for drafts").setDesc("Add an underscore prefix (_post-title) to new notes by default when enabled. This hides them from Astro, which can be helpful for post drafts. Disable to skip prefixing.").addToggle(e=>e.setValue(this.plugin.settings.enableUnderscorePrefix).onChange(async t=>{this.plugin.settings.enableUnderscorePrefix=t,await this.plugin.saveSettings()})),new i.Setting(s).setName("Link base path").setDesc("Base path for converted links (e.g., /blog/, leave blank for root domain).").addText(e=>e.setPlaceholder("/blog/").setValue(this.plugin.settings.linkBasePath).onChange(async t=>{this.plugin.settings.linkBasePath=t,await this.plugin.saveSettings()})),new i.Setting(s).setName("Date format").setDesc("Format for the date in properties (e.g., YYYY-MM-DD, MMMM D, YYYY, YYYY-MM-DD HH:mm).").addText(e=>e.setPlaceholder("YYYY-MM-DD HH:mm").setValue(this.plugin.settings.dateFormat).onChange(async t=>{this.plugin.settings.dateFormat=t||"YYYY-MM-DD HH:mm",await this.plugin.saveSettings()})),new i.Setting(s).setName("Properties template").addTextArea(e=>{let t=this.plugin;return e.setPlaceholder(`---
title: "{{title}}"
date: {{date}}
description: ""
tags: []
---
`).setValue(t.settings.defaultTemplate).onChange(async c=>{t.settings.defaultTemplate=c,await t.saveSettings()}),e.inputEl.classList.add("astro-composer-template-textarea"),e}).then(e=>{e.descEl.empty();let t=e.descEl.createEl("div");t.innerHTML="Used for new posts and when standardizing properties.<br />Variables include {{title}} and {{date}}.<br />Do not wrap {{date}} in quotes as it represents a datetime value, not a string.<br />The 'standardize properties' command ignores anything below the second '---' line."}),this.updateConditionalFields(),this.updateIndexFileField(),this.updateExcludedDirsField()}updateConditionalFields(){this.autoRenameContainer&&(this.autoRenameContainer.style.display=this.plugin.settings.automatePostCreation?"block":"none")}updateIndexFileField(){this.indexFileContainer&&(this.indexFileContainer.style.display=this.plugin.settings.creationMode==="folder"?"block":"none")}updateExcludedDirsField(){this.excludedDirsContainer&&(this.excludedDirsContainer.style.display=this.plugin.settings.onlyAutomateInPostsFolder?"none":"block")}};
